Historical buildables on the server

For server that have historical buildings, you will need to convert then to the new system.
 
Open your chosen SQL tool (HeidySQL / MySQL workbench etc) and open an new SQL session and connect to your MySQL DB.
 
HD.1 (only needed if you didn't do PC.1-5b skipping PC.5a above) - create the function which will convert the playerUID.  Paste the following to create the function and run it.

DROP FUNCTION IF EXISTS text2digits; 
DELIMITER | 
CREATE FUNCTION text2digits( str CHAR(32) ) RETURNS CHAR(32) 
BEGIN 
  DECLARE i, len SMALLINT DEFAULT 1; 
  DECLARE ret CHAR(32) DEFAULT ''; 
  DECLARE c CHAR(1); 
  SET len = CHAR_LENGTH( str ); 
  REPEAT 
    BEGIN 
      SET c = MID( str, i, 1 ); 
      IF c BETWEEN '0' AND '9' THEN  
        SET ret=CONCAT(ret,c); 
 else
SET ret=CONCAT(ret,"9");
      END IF; 
      SET i = i + 1; 
    END; 
  UNTIL i > len END REPEAT; 
  RETURN ret; 
END | 
DELIMITER ; 

Now for some testing.
 
What it does.
The following code will show the information from the object_data table plus the original playerUID from the character_data table and the proposed "newplayerUID".  Nothing is being changed at this point.  It is just showing to the screen for you to check it all looks good.  
 
Checks.
Confirm that all playerUIDs with letters have a number 9 replacing each letter int he newplayerUID and that there is nothing listed in there that is not a buildable.
 
HDT.1 - Now open a second MySQL editor window and connect to the MySQL DB.  Paste in the following, run it and perform the checks suggested above.

select `ObjectID`,
object_data.`ObjectUID`,
object_data.`Instance`,
object_data.`Classname`,
object_data.`Datestamp`,
object_data.`LastUpdated`,
object_data.`CharacterID`,
character_data.`playerUID`,
text2digits(character_data.playerUID) 'NewplayerUID',
object_data.`Worldspace`,
object_data.`Inventory`,
object_data.`Hitpoints`,
object_data.`Fuel`,
object_data.`Damage`
from object_data, character_data
where object_data.CharacterID <> 0
and character_data.CharacterID = object_data.characterID;

If everything is ok then you should be good to proceed.
 
HD.2 - Open a new sql window and connect to your MySQL DB.  Paste the following and run it.

START TRANSACTION;

update object_data, character_data
set object_data.CharacterID = text2digits(character_data.playerUID)
where object_data.CharacterID <> 0
and character_data.CharacterID = object_data.characterID;


select * from object_data, character_data
where object_data.CharacterID <> 0
and text2digits(character_data.playerUID) = object_data.characterID;

HD.3a - if you get any sort of error then run.

rollback

HD.3b - If all looks good then run.

commit

Historical update complete